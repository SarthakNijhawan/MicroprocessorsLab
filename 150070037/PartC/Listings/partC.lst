C51 COMPILER V9.56.0.0   PARTC                                                             10/14/2017 01:31:13 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE PARTC
OBJECT MODULE PLACED IN .\Objects\partC.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE partC.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\par
                    -tC.lst) TABS(2) OBJECT(.\Objects\partC.obj)

line level    source

   1          #include "at89c5131.h"
   2          #include "stdio.h"
   3          #define LCD_data  P2                // LCD Data port
   4          
   5          void meas_volt();
   6          void INT0_Init();
   7          void LCD_Init();
   8          void LCD_DataWrite(char dat);
   9          void LCD_CmdWrite(char cmd);
  10          void LCD_StringWrite(char * str, unsigned char len);
  11          void LCD_Ready();
  12          void sdelay(int delay);
  13          void delay_ms(int delay);
  14          
  15          sfr IE=0xA8;
  16          unsigned int port_input=0;
  17          unsigned char temp[3];
  18          char i=0;
  19          bit flag=0;
  20          
  21          sbit LCD_rs = P0^0;                 // LCD Register Select
  22          sbit LCD_rw = P0^1;                 // LCD Read/Write
  23          sbit LCD_en = P0^2;                 // LCD Enable
  24          sbit LCD_busy = P2^7;               // LCD Busy Flag
  25          
  26          sbit CS_BAR = P3^7;
  27          sbit RD_BAR = P3^6;
  28          sbit WR_BAR = P3^5;
  29          sbit arbit = P3^4;
  30          
  31          void main(void){
  32   1        // P3 = 0X00;                     // Make Port 3 output 
  33   1        P2 = 0x00;                      // Make Port 2 output 
  34   1        P1 = 0xFF;                      // P1 Input port
  35   1      
  36   1        LCD_Init();
  37   1        // P1 = 0xFF;             // Input port
  38   1      
  39   1        while(1){
  40   2          meas_volt();
  41   2      
  42   2          if(flag == 1){
  43   3            port_input = port_input*50;
  44   3            port_input /= 255;
  45   3      
  46   3            /* Updates the desired temperature */
  47   3            temp[0]=port_input/10;
  48   3            temp[0]%=10;
  49   3            temp[1]=port_input;
  50   3            temp[1]%=10;
  51   3      
  52   3            LCD_CmdWrite(0xC0);
  53   3            sdelay(100);
  54   3      
C51 COMPILER V9.56.0.0   PARTC                                                             10/14/2017 01:31:13 PAGE 2   

  55   3            for(i=0; i<2; i++){
  56   4              LCD_DataWrite(temp[i]+'0');
  57   4            }
  58   3      
  59   3            flag=0;
  60   3          }
  61   2      
  62   2          // P1=0xFF;
  63   2          delay_ms(100);
  64   2        }
  65   1      }
  66          
  67          
  68          void INT0_ISR (void) interrupt 0  
  69          {
  70   1        // sdelay(10);
  71   1      
  72   1        // CS_BAR=0;
  73   1        // sdelay(100);
  74   1        TCON &= 0xFD;
  75   1      
  76   1        sdelay(1);
  77   1      
  78   1        RD_BAR=0;
  79   1        sdelay(10);
  80   1      
  81   1        RD_BAR=1;
  82   1        sdelay(1);
  83   1      
  84   1        port_input=P1;  // READ INPUT
  85   1        flag=1;
  86   1      
  87   1        arbit=~arbit;
  88   1      }
  89          
  90          void INT0_Init(){
  91   1        CS_BAR = 0;
  92   1        RD_BAR = 1;
  93   1        WR_BAR = 1;
  94   1        IE |= 0x81;             // Enable interrupt
  95   1        IT0=1;                // falling edge
  96   1      }
  97          
  98          void meas_volt(){
  99   1        INT0_Init();
 100   1        sdelay(1);
 101   1      
 102   1        CS_BAR = 0;                 // enable ADC as slave     
 103   1        
 104   1        sdelay(2);
 105   1        WR_BAR = 0;
 106   1      
 107   1        sdelay(2);
 108   1        WR_BAR = 1;
 109   1      
 110   1      }
 111          
 112          // -------------------------------------------- LCD Functions 
 113          
 114          /**
 115           * FUNCTION_PURPOSE:LCD Initialization
 116           * FUNCTION_INPUTS: void
C51 COMPILER V9.56.0.0   PARTC                                                             10/14/2017 01:31:13 PAGE 3   

 117           * FUNCTION_OUTPUTS: none
 118           */
 119          void LCD_Init()
 120          {
 121   1        sdelay(100);
 122   1        LCD_CmdWrite(0x38);       // LCD 2lines, 5*7 matrix
 123   1        LCD_CmdWrite(0x0C);     // Display ON cursor ON  Blinking off
 124   1        LCD_CmdWrite(0x01);     // Clear the LCD
 125   1        LCD_CmdWrite(0x80);     // Cursor to First line First Position
 126   1      }
 127          
 128          /**
 129           * FUNCTION_PURPOSE: Write Command to LCD
 130           * FUNCTION_INPUTS: cmd- command to be written
 131           * FUNCTION_OUTPUTS: none
 132           */
 133          void LCD_CmdWrite(char cmd)
 134          {
 135   1        LCD_Ready();
 136   1        LCD_data=cmd;           // Send the command to LCD
 137   1        LCD_rs=0;               // Select the Command Register by pulling LCD_rs LOW
 138   1        LCD_rw=0;               // Select the Write Operation  by pulling RW LOW
 139   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 140   1        sdelay(5);
 141   1        LCD_en=0;
 142   1        sdelay(5);
 143   1      }
 144          
 145          /**
 146           * FUNCTION_PURPOSE: Write Command to LCD
 147           * FUNCTION_INPUTS: dat- data to be written
 148           * FUNCTION_OUTPUTS: none
 149           */
 150          void LCD_DataWrite( char dat)
 151          {
 152   1        LCD_Ready();
 153   1          LCD_data=dat;           // Send the data to LCD
 154   1          LCD_rs=1;             // Select the Data Register by pulling LCD_rs HIGH
 155   1          LCD_rw=0;               // Select the Write Operation by pulling RW LOW
 156   1          LCD_en=1;             // Send a High-to-Low Pusle at Enable Pin
 157   1          sdelay(5);
 158   1          LCD_en=0;
 159   1        sdelay(5);
 160   1      }
 161          
 162          /**
 163           * FUNCTION_PURPOSE: Write a string on the LCD Screen
 164           * FUNCTION_INPUTS: 1. str - pointer to the string to be written, 
 165                              2. length - length of the array
 166           * FUNCTION_OUTPUTS: none
 167           */
 168          void LCD_StringWrite( char * str, unsigned char length)
 169          {
 170   1          while(length>0)
 171   1          {
 172   2              LCD_DataWrite(*str);
 173   2              str++;
 174   2              length--;
 175   2          }
 176   1      }
 177          
 178          /**
C51 COMPILER V9.56.0.0   PARTC                                                             10/14/2017 01:31:13 PAGE 4   

 179           * FUNCTION_PURPOSE: To check if the LCD is ready to communicate
 180           * FUNCTION_INPUTS: void
 181           * FUNCTION_OUTPUTS: none
 182           */
 183          void LCD_Ready()
 184          {
 185   1        LCD_data = 0xFF;
 186   1        LCD_rs = 0;
 187   1        LCD_rw = 1;
 188   1        LCD_en = 0;
 189   1        sdelay(5);
 190   1        LCD_en = 1;
 191   1        while(LCD_busy == 1)
 192   1        {
 193   2          LCD_en = 0;
 194   2          LCD_en = 1;
 195   2        }
 196   1        LCD_en = 0;
 197   1      }
 198          
 199          /**
 200           * FUNCTION_PURPOSE: A delay of 15us for a 24 MHz crystal
 201           * FUNCTION_INPUTS: void
 202           * FUNCTION_OUTPUTS: none
 203           */
 204          void sdelay(int delay)
 205          {
 206   1        char d=0;
 207   1        while(delay>0)
 208   1        {
 209   2          for(d=0;d<5;d++);
 210   2          delay--;
 211   2        }
 212   1      }
 213          
 214          /**
 215           * FUNCTION_PURPOSE: A delay of around 1000us for a 24MHz crystel
 216           * FUNCTION_INPUTS: void
 217           * FUNCTION_OUTPUTS: none
 218           */
 219          void delay_ms(int delay)
 220          {
 221   1        int d=0;
 222   1        while(delay>0)
 223   1        {
 224   2          for(d=0;d<382;d++);
 225   2          delay--;
 226   2        }
 227   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    463    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
