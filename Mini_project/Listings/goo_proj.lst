C51 COMPILER V9.56.0.0   GOO_PROJ                                                          10/10/2017 03:10:59 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE GOO_PROJ
OBJECT MODULE PLACED IN .\Objects\goo_proj.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE goo_proj.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -goo_proj.lst) TABS(2) OBJECT(.\Objects\goo_proj.obj)

line level    source

   1          #include "at89c5131.h"
   2          #include "stdio.h"
   3          #define LCD_data  P2                // LCD Data port
   4          
   5          void SPI_Init();
   6          void LCD_Init();
   7          void Timer_Init();
   8          void LCD_DataWrite(char dat);
   9          void LCD_CmdWrite(char cmd);
  10          void LCD_StringWrite(char * str, unsigned char len);
  11          void LCD_Ready();
  12          void sdelay(int delay);
  13          void delay_ms(int delay);
  14          void update_time();
  15          
  16          sfr IE=0xA8;
  17          
  18          sbit LED_debug_1 = P1^7;
  19          sbit LED_debug_2 = P1^6;
  20          sbit LED_debug_3 = P1^5;
  21          sbit LED_debug_4 = P1^4;
  22          
  23          sbit CS_BAR = P1^4;                 // Chip Select for the ADC
  24          sbit LCD_rs = P0^0;                 // LCD Register Select
  25          sbit LCD_rw = P0^1;                 // LCD Read/Write
  26          sbit LCD_en = P0^2;                 // LCD Enable
  27          sbit LCD_busy = P2^7;               // LCD Busy Flag
  28          sbit ONULL = P1^0;
  29          bit transmit_completed= 0;              // To check if spi data transmit is complete
  30          bit offset_null = 0;                // Check if offset nulling is enabled
  31          bit roundoff = 0;
  32          unsigned int adcVal=0, avgVal=0, initVal=0, adcValue = 0, total_time_in_sec=0; //, timerVal=0;
  33          unsigned char serial_data;
  34          unsigned char data_save_high;
  35          unsigned char data_save_low;
  36          unsigned char i=0, samples_counter=0, timer_count=40;
  37          unsigned char temp[3], time[4];
  38          
  39          unsigned int del_T=2;     // Band is set to [DT-det_t, DT+det_t]
  40          unsigned int CT=0;        // Default current temperature
  41          unsigned int DT=40;       // Default desired temperature
  42          
  43          sbit PIN = P1^0;        // This is to check the mode of the Temperature Controller
  44          sbit RELAY = P3^7;        // This pins drives the relay switch
  45          
  46          bit flag=1;
  47          
  48          void main(void){
  49   1        P3 = 0X00;                      // Make Port 3 output 
  50   1        P2 = 0x00;                      // Make Port 2 output 
  51   1        P1 &= 0xEF;                     // Make P1 Pin4-7 output
  52   1        P0 &= 0xF0;                     // Make Port 0 Pins 0,1,2 output
  53   1        
  54   1        SPI_Init();
C51 COMPILER V9.56.0.0   GOO_PROJ                                                          10/10/2017 03:10:59 PAGE 2   

  55   1        LCD_Init();
  56   1        Timer_Init();     // initialise the timer
  57   1        
  58   1        /* First Line on the LCD, updated only once */
  59   1        LCD_CmdWrite(0x81);
  60   1        sdelay(100);
  61   1        LCD_StringWrite("DT", 2);
  62   1      
  63   1        LCD_CmdWrite(0x87);
  64   1        sdelay(100);
  65   1        LCD_StringWrite("CT", 2);
  66   1      
  67   1        LCD_CmdWrite(0x8C);
  68   1        sdelay(100);
  69   1        LCD_StringWrite("Time", 4);
  70   1      
  71   1      
  72   1        /* Updating the default Desired temperature */
  73   1        LCD_CmdWrite(0xC0);
  74   1        sdelay(100);
  75   1      
  76   1        temp[0]=DT/100;
  77   1        temp[0]%=10;
  78   1        temp[1]=DT/10;
  79   1        temp[1]%=10;
  80   1        temp[2]=DT;
  81   1        temp[2]%=10;
  82   1        for(i=0; i<3; i++){
  83   2          LCD_DataWrite(temp[i]+'0');
  84   2        }
  85   1      
  86   1        PIN=1;
  87   1        RELAY=0;
  88   1      
  89   1        while(1){               // Runs Forever
  90   2      
  91   2          if(PIN==1){             // Set mode
  92   3            RELAY=0;            // Relay is set to 0 initially
  93   3      
  94   3            while(1)            // Sampling starts 
  95   3            {
  96   4              
  97   4              CS_BAR = 0;                 // enable ADC as slave     
  98   4              SPDAT= 0x01;        // Write start bit to start ADC 
  99   4              while(!transmit_completed); // wait end of transmition; TILL SPIF = 1 i.e. MSB of SPSTA
 100   4              transmit_completed = 0;     // clear software transfert flag 
 101   4              
 102   4              SPDAT= 0x80;        // 80H written to start ADC CH0 single ended sampling,refer ADC datasheet
 103   4              while(!transmit_completed); // wait end of transmition 
 104   4              data_save_high = serial_data & 0x03;  
 105   4              transmit_completed = 0;     // clear software transfer flag 
 106   4                  
 107   4              SPDAT= 0x00;                // 
 108   4              while(!transmit_completed); // wait end of transmition 
 109   4              data_save_low = serial_data;
 110   4              transmit_completed = 0;     // clear software transfer flag 
 111   4              CS_BAR = 1;                 // disable ADC as slave
 112   4              
 113   4              adcVal = (data_save_high <<8) + (data_save_low);  // Value at adc
 114   4      
 115   4              samples_counter++;      // Tracks the number of samples taken 
 116   4              adcValue+=adcVal;
C51 COMPILER V9.56.0.0   GOO_PROJ                                                          10/10/2017 03:10:59 PAGE 3   

 117   4              if(samples_counter!=10) continue;
 118   4              else{
 119   5                samples_counter=0;
 120   5                avgVal = adcValue/200;      //Average
 121   5                adcValue=0;
 122   5      
 123   5                if(avgVal < 5){
 124   6                  avgVal = 0;
 125   6                }
 126   5                else if(5<avgVal && avgVal<15){
 127   6                  avgVal = 10;
 128   6                }
 129   5                else if(15<avgVal && avgVal<25){
 130   6                  avgVal = 20;
 131   6                }
 132   5                else if(25<avgVal && avgVal<35){
 133   6                  avgVal = 30;
 134   6                }
 135   5                else if(35<avgVal && avgVal<45){
 136   6                  avgVal = 40;
 137   6                }
 138   5                else{
 139   6                  avgVal = 50;
 140   6                }
 141   5                avgVal+=35;
 142   5                DT=avgVal;
 143   5      
 144   5                /* Updates the desired temperature */
 145   5                temp[0]=avgVal/100;
 146   5                temp[0]%=10;
 147   5                temp[1]=avgVal/10;
 148   5                temp[1]%=10;
 149   5                temp[2]=avgVal;
 150   5                temp[2]%=10;
 151   5          
 152   5                LCD_CmdWrite(0xC0);
 153   5                sdelay(100);
 154   5      
 155   5                for(i=0; i<3; i++){
 156   6                  LCD_DataWrite(temp[i]+'0');
 157   6                }
 158   5              }
 159   4      
 160   4              /* Updates the time in SET mode to "0000" initially */
 161   4              for ( i = 0; i<4; ++i) time[i]=0;
 162   4              update_time();
 163   4      
 164   4              total_time_in_sec=0;  // Total time is initially set to 0
 165   4              flag=1;         // Flag ensures timer runs in the RUN mode
 166   4              TR0=0;          // Timer is set OFF
 167   4              break;          // Break out of the (sampling)loop
 168   4              }
 169   3      
 170   3          }
 171   2          else{ // RUN mode
 172   3      
 173   3            while(1)                        // endless 
 174   3            {
 175   4              
 176   4              CS_BAR = 0;                 // enable ADC as slave     
 177   4              SPDAT= 0x01;        // Write start bit to start ADC 
 178   4              while(!transmit_completed); // wait end of transmition; TILL SPIF = 1 i.e. MSB of SPSTA
C51 COMPILER V9.56.0.0   GOO_PROJ                                                          10/10/2017 03:10:59 PAGE 4   

 179   4              transmit_completed = 0;     // clear software transfert flag 
 180   4              
 181   4              SPDAT= 0x90;        // 80H written to start ADC CH0 single ended sampling,refer ADC datasheet
 182   4              while(!transmit_completed); // wait end of transmition 
 183   4              data_save_high = serial_data & 0x03;  
 184   4              transmit_completed = 0;     // clear software transfer flag 
 185   4                  
 186   4              SPDAT= 0x00;                // 
 187   4              while(!transmit_completed); // wait end of transmition 
 188   4              data_save_low = serial_data;
 189   4              transmit_completed = 0;     // clear software transfer flag 
 190   4              CS_BAR = 1;                 // disable ADC as slave
 191   4              
 192   4              adcVal = (data_save_high <<8) + (data_save_low);  // Value at adc
 193   4      
 194   4              samples_counter++;
 195   4              adcValue+=adcVal;
 196   4              if(samples_counter!=10) continue;
 197   4              else{
 198   5                samples_counter=0;
 199   5                avgVal = adcValue/20;     //Average
 200   5                CT=avgVal;
 201   5                adcValue=0;
 202   5      
 203   5                /* Updates the current temperature */
 204   5                temp[0]=avgVal/100;
 205   5                temp[0]%=10;
 206   5                temp[1]=avgVal/10;
 207   5                temp[1]%=10;
 208   5                temp[2]=avgVal;
 209   5                temp[2]%=10;
 210   5          
 211   5                LCD_CmdWrite(0xC6);
 212   5                sdelay(100);
 213   5      
 214   5                for(i=0; i<3; i++){
 215   6                  LCD_DataWrite(temp[i]+'0');
 216   6                }
 217   5                
 218   5              }
 219   4              break;
 220   4              }
 221   3      
 222   3              /* Regulate Temperature */
 223   3              if( (DT+del_T) <= CT ){
 224   4              RELAY=0;
 225   4            }
 226   3            else if( (DT-del_T) >= CT ){
 227   4              RELAY=1;
 228   4            }
 229   3      
 230   3            /* Checks whether the timer has to be updated */
 231   3            if(flag==1){
 232   4              TR0=1;              // Timer set ON
 233   4      
 234   4              time[0]=total_time_in_sec/1000;
 235   4              time[0]%=10;
 236   4              time[1]=total_time_in_sec/100;
 237   4              time[1]%=10;
 238   4              time[2]=total_time_in_sec/10;
 239   4              time[2]%=10;
 240   4              time[3]=total_time_in_sec;
C51 COMPILER V9.56.0.0   GOO_PROJ                                                          10/10/2017 03:10:59 PAGE 5   

 241   4              time[3]%=10;
 242   4              update_time();
 243   4      
 244   4              if(CT == DT){
 245   5                flag=0;       // Time on LCD won;t be updated when flag is set to 0
 246   5                IE &= 0xFD;     // Disable the timer interrupt
 247   5                TR0=0;        // Switches OFF the timer
 248   5              }
 249   4              else flag=1;
 250   4            }
 251   3      
 252   3          }
 253   2      
 254   2          PIN=1;
 255   2          delay_ms(1000);
 256   2          /* While loop ends */
 257   2        }
 258   1      /* Main Ends */
 259   1      }
 260          
 261          
 262          void update_time(){
 263   1      
 264   1        LCD_CmdWrite(0xCC);
 265   1        sdelay(100);
 266   1      
 267   1        for(i=0; i<4; i++){
 268   2          LCD_DataWrite(time[i]+'0');
 269   2        }
 270   1      
 271   1      }
 272          
 273          
 274          // -------------------------------------------------------Timer Functions
 275          void Timer_Init()
 276          {
 277   1        // Set Timer0 to work in up counting 16 bit mode. Counts upto 
 278   1        // 65536 depending upon the calues of TH0 and TL0
 279   1        // The timer counts 65536 processor cycles. A processor cycle is 
 280   1        // 12 clocks. FOr 24 MHz, it takes 65536/2 uS to overflow
 281   1          
 282   1        TH0 = 0x3C;             //Initialised to generate a delay of 25ms
 283   1        TL0 = 0xAF;             //Initialised to generate a delay of 25ms
 284   1        TMOD = 0x01;            //Configure TMOD
 285   1        IE |= 0x82;             //Enable interrupt
 286   1        TR0 = 0;              //Set TR0
 287   1      }
 288          
 289          void timer0_ISR (void) interrupt 1      
 290          {
 291   1        //Initialize TH0
 292   1        //Initialize TL0
 293   1        //Increment Overflow 
 294   1        //Write averaging of 10 samples code here
 295   1      
 296   1        if(timer_count==0){             // 1000ms passed
 297   2          total_time_in_sec++;
 298   2          timer_count=40;
 299   2        }
 300   1        else timer_count--;
 301   1      }
 302          
C51 COMPILER V9.56.0.0   GOO_PROJ                                                          10/10/2017 03:10:59 PAGE 6   

 303          
 304          
 305          //----------------------------------------SPI Functions
 306          
 307          /**
 308           * FUNCTION_PURPOSE:interrupt
 309           * FUNCTION_INPUTS: void
 310           * FUNCTION_OUTPUTS: transmit_complete is software transfert flag
 311           */
 312          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B, (Address -3)/8 = interrupt no.*/
 313          {
 314   1        switch  ( SPSTA )         /* read and clear spi status register */
 315   1        {
 316   2          case 0x80:  
 317   2            serial_data=SPDAT;   /* read receive data */
 318   2                transmit_completed=1;/* set software flag */
 319   2          break;
 320   2      
 321   2          case 0x10:
 322   2               /* put here for mode fault tasking */  
 323   2          break;
 324   2        
 325   2          case 0x40:
 326   2               /* put here for overrun tasking */ 
 327   2          break;
 328   2        }
 329   1      }
 330          
 331          
 332          /**
 333          
 334           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
 335           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
 336           *                   P1.4(SSbar)
 337                               P1.6(SCK)
 338           */ 
 339          void SPI_Init()
 340          {
 341   1        CS_BAR = 1;                     // DISABLE ADC SLAVE SELECT-CS 
 342   1        SPCON |= 0x20;                  // P1.1(SSBAR) is available as standard I/O pin 
 343   1        SPCON |= 0x01;                  // Fclk Periph/4 AND Fclk Periph=12MHz ,HENCE SCK IE. BAUD RATE=3000KHz 
 344   1        SPCON |= 0x10;                  // Master mode 
 345   1        SPCON &= ~0x08;                 // CPOL=0; transmit mode example|| SCK is 0 at idle state
 346   1        SPCON |= 0x04;                  // CPHA=1; transmit mode example 
 347   1        IEN1 |= 0x04;                   // enable spi interrupt 
 348   1        EA=1;                           // enable interrupts 
 349   1        SPCON |= 0x40;                  // run spi;ENABLE SPI INTERFACE SPEN= 1 
 350   1      }
 351          
 352          // -------------------------------------------- LCD Functions 
 353          
 354          /**
 355           * FUNCTION_PURPOSE:LCD Initialization
 356           * FUNCTION_INPUTS: void
 357           * FUNCTION_OUTPUTS: none
 358           */
 359          void LCD_Init()
 360          {
 361   1        sdelay(100);
 362   1        LCD_CmdWrite(0x38);       // LCD 2lines, 5*7 matrix
 363   1        LCD_CmdWrite(0x0C);     // Display ON cursor ON  Blinking off
 364   1        LCD_CmdWrite(0x01);     // Clear the LCD
C51 COMPILER V9.56.0.0   GOO_PROJ                                                          10/10/2017 03:10:59 PAGE 7   

 365   1        LCD_CmdWrite(0x80);     // Cursor to First line First Position
 366   1      }
 367          
 368          /**
 369           * FUNCTION_PURPOSE: Write Command to LCD
 370           * FUNCTION_INPUTS: cmd- command to be written
 371           * FUNCTION_OUTPUTS: none
 372           */
 373          void LCD_CmdWrite(char cmd)
 374          {
 375   1        LCD_Ready();
 376   1        LCD_data=cmd;           // Send the command to LCD
 377   1        LCD_rs=0;               // Select the Command Register by pulling LCD_rs LOW
 378   1        LCD_rw=0;               // Select the Write Operation  by pulling RW LOW
 379   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 380   1        sdelay(5);
 381   1        LCD_en=0;
 382   1        sdelay(5);
 383   1      }
 384          
 385          /**
 386           * FUNCTION_PURPOSE: Write Command to LCD
 387           * FUNCTION_INPUTS: dat- data to be written
 388           * FUNCTION_OUTPUTS: none
 389           */
 390          void LCD_DataWrite( char dat)
 391          {
 392   1        LCD_Ready();
 393   1          LCD_data=dat;           // Send the data to LCD
 394   1          LCD_rs=1;             // Select the Data Register by pulling LCD_rs HIGH
 395   1          LCD_rw=0;               // Select the Write Operation by pulling RW LOW
 396   1          LCD_en=1;             // Send a High-to-Low Pusle at Enable Pin
 397   1          sdelay(5);
 398   1          LCD_en=0;
 399   1        sdelay(5);
 400   1      }
 401          
 402          /**
 403           * FUNCTION_PURPOSE: Write a string on the LCD Screen
 404           * FUNCTION_INPUTS: 1. str - pointer to the string to be written, 
 405                              2. length - length of the array
 406           * FUNCTION_OUTPUTS: none
 407           */
 408          void LCD_StringWrite( char * str, unsigned char length)
 409          {
 410   1          while(length>0)
 411   1          {
 412   2              LCD_DataWrite(*str);
 413   2              str++;
 414   2              length--;
 415   2          }
 416   1      }
 417          
 418          /**
 419           * FUNCTION_PURPOSE: To check if the LCD is ready to communicate
 420           * FUNCTION_INPUTS: void
 421           * FUNCTION_OUTPUTS: none
 422           */
 423          void LCD_Ready()
 424          {
 425   1        LCD_data = 0xFF;
 426   1        LCD_rs = 0;
C51 COMPILER V9.56.0.0   GOO_PROJ                                                          10/10/2017 03:10:59 PAGE 8   

 427   1        LCD_rw = 1;
 428   1        LCD_en = 0;
 429   1        sdelay(5);
 430   1        LCD_en = 1;
 431   1        while(LCD_busy == 1)
 432   1        {
 433   2          LCD_en = 0;
 434   2          LCD_en = 1;
 435   2        }
 436   1        LCD_en = 0;
 437   1      }
 438          
 439          /**
 440           * FUNCTION_PURPOSE: A delay of 15us for a 24 MHz crystal
 441           * FUNCTION_INPUTS: void
 442           * FUNCTION_OUTPUTS: none
 443           */
 444          void sdelay(int delay)
 445          {
 446   1        char d=0;
 447   1        while(delay>0)
 448   1        {
 449   2          for(d=0;d<5;d++);
 450   2          delay--;
 451   2        }
 452   1      }
 453          
 454          /**
 455           * FUNCTION_PURPOSE: A delay of around 1000us for a 24MHz crystel
 456           * FUNCTION_INPUTS: void
 457           * FUNCTION_OUTPUTS: none
 458           */
 459          void delay_ms(int delay)
 460          {
 461   1        int d=0;
 462   1        while(delay>0)
 463   1        {
 464   2          for(d=0;d<382;d++);
 465   2          delay--;
 466   2        }
 467   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1215    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     29       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
